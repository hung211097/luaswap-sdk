{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÃ–RLI = 5,\r\n  KOVAN = 42,\r\n  TOMOCHAIN_DEVNET = 99,\r\n  TOMOCHAIN_TESTNET = 89,\r\n  TOMOCHAIN_MAINNET = 88,\r\n  FACCHAIN = 1997\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\n// TODO: Need to change to luaswap's factory address\r\nexport const FACTORY_ADDRESS = '0x7d3f09a40a93acad98f16e56237ba6187ee0ab68'\r\n\r\n// TODO: Need to change every code smartcontract updated\r\nexport const INIT_CODE_HASH = '0x9020c8b9967def5c9eb8e0391a89bed501b113aa0435f7022a02d36b3d82a51d'\r\n// Tomo factory address testnet: 0x1BA0DdCa35e152bE46e85e1EF9Db22d431dDc95e\r\nexport const TOMO_FACTORY_ADDRESS = '0x28c79368257CD71A122409330ad2bEBA7277a396'\r\n// Tomo init code testnet: 0x2b9f535a55a8f0b77a1508fcfc2c2ed9d6ea509f3ea06d803782ad840328d61e\r\nexport const TOMO_INIT_CODE_HASH = '0xdb97fca50f04565472504aea8301c967285be031e5bdd131140734c3759d7015'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _995 = JSBI.BigInt(995)\r\nexport const _996 = JSBI.BigInt(996)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\r\n  public static readonly TOMO: Currency = new Currency(18, 'TOMO', 'TomoChain')\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst ETHER = Currency.ETHER\r\nconst TOMO = Currency.TOMO\r\n\r\nexport { ETHER, TOMO }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.TOMOCHAIN_DEVNET]: new Token(\r\n    ChainId.TOMOCHAIN_DEVNET,\r\n    '0xFdAA97661a584D977B4D3AbB5370766fF5b86A18',\r\n    18,\r\n    'WTOMO',\r\n    'Wrapped TOMO'\r\n  ),\r\n  [ChainId.TOMOCHAIN_TESTNET]: new Token(\r\n    ChainId.TOMOCHAIN_TESTNET,\r\n    '0xB837c744A16A7f133A750254270Dce792dBBAE77',\r\n    18,\r\n    'WTOMO',\r\n    'Wrapped TOMO'\r\n  ),\r\n  [ChainId.TOMOCHAIN_MAINNET]: new Token(\r\n    ChainId.TOMOCHAIN_MAINNET,\r\n    '0xB1f66997A5760428D3a87D68b90BfE0aE64121cC',\r\n    18,\r\n    'WTOMO',\r\n    'Wrapped TOMO'\r\n  ),\r\n  [ChainId.FACCHAIN]: new Token(\r\n    ChainId.FACCHAIN,\r\n    '0x8c830891E20dbBb5368FDfb006cC73981B06E632',\r\n    18,\r\n    'WFAC',\r\n    'Wrapped FAC'\r\n  )\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, ETHER, TOMO } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(ETHER, amount)\r\n  }\r\n\r\n  /**\r\n   * Helper that calls the constructor with the TOMO currency\r\n   * @param amount tomo amount in wei\r\n   */\r\n  public static tomo(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(TOMO, amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  TOMO_FACTORY_ADDRESS,\r\n  TOMO_INIT_CODE_HASH,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  _996,\r\n  _1000,\r\n  ChainId\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    const IsTomo = Pair.IsTomo(tokens[0].chainId)\r\n    \r\n    const factory_address = IsTomo ? TOMO_FACTORY_ADDRESS : FACTORY_ADDRESS\r\n\r\n    const init_code_hash = IsTomo ? TOMO_INIT_CODE_HASH : INIT_CODE_HASH\r\n    // console.log(IsTomo, factory_address,init_code_hash) \r\n    // if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            factory_address,\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            init_code_hash\r\n          )\r\n        }\r\n      }\r\n    // }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n  // Add function check Tomochain network\r\n  public static IsTomo(chainId: ChainId){\r\n    return chainId === 89 || chainId === 88 || chainId === 99\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'Uniswap V2'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _996)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _996)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, ETHER, TOMO } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        ((input === ETHER || input === TOMO) && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        ((output === ETHER || output === TOMO) && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, ETHER, TOMO } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER || currencyAmount.currency === TOMO) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER || currency === TOMO) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === ETHER\r\n        ? CurrencyAmount.ether(amounts[0].raw)\r\n        : route.input === TOMO\r\n        ? CurrencyAmount.tomo(amounts[0].raw)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === ETHER\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\r\n        : route.output === TOMO\r\n        ? CurrencyAmount.tomo(amounts[amounts.length - 1].raw)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, ETHER, TOMO, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === ETHER || trade.inputAmount.currency === TOMO\r\n    const etherOut = trade.outputAmount.currency === ETHER || trade.outputAmount.currency === TOMO\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","TOMO_INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_996","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","TOMO","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","TOMOCHAIN_DEVNET","TOMOCHAIN_TESTNET","TOMOCHAIN_MAINNET","FACCHAIN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","tomo","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","IsTomo","init_code_hash","_PAIR_ADDRESS_CACHE","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}